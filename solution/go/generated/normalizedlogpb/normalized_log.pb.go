// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.2
// source: normalized_log.proto

package normalizedlogpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNS_ReturnCode int32

const (
	DNS_UNSPECIFIED DNS_ReturnCode = 0
	DNS_NOERROR     DNS_ReturnCode = 1
	DNS_FORMERR     DNS_ReturnCode = 2
	DNS_SERVFAIL    DNS_ReturnCode = 3
	DNS_NXDOMAIN    DNS_ReturnCode = 4
	DNS_NOTIMP      DNS_ReturnCode = 5
	DNS_REFUSED     DNS_ReturnCode = 6
	DNS_YXDOMAIN    DNS_ReturnCode = 7
	DNS_XRRSET      DNS_ReturnCode = 8
	DNS_NOTAUTH     DNS_ReturnCode = 9
	DNS_NOTZONE     DNS_ReturnCode = 10
)

// Enum value maps for DNS_ReturnCode.
var (
	DNS_ReturnCode_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "NOERROR",
		2:  "FORMERR",
		3:  "SERVFAIL",
		4:  "NXDOMAIN",
		5:  "NOTIMP",
		6:  "REFUSED",
		7:  "YXDOMAIN",
		8:  "XRRSET",
		9:  "NOTAUTH",
		10: "NOTZONE",
	}
	DNS_ReturnCode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NOERROR":     1,
		"FORMERR":     2,
		"SERVFAIL":    3,
		"NXDOMAIN":    4,
		"NOTIMP":      5,
		"REFUSED":     6,
		"YXDOMAIN":    7,
		"XRRSET":      8,
		"NOTAUTH":     9,
		"NOTZONE":     10,
	}
)

func (x DNS_ReturnCode) Enum() *DNS_ReturnCode {
	p := new(DNS_ReturnCode)
	*p = x
	return p
}

func (x DNS_ReturnCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ReturnCode) Descriptor() protoreflect.EnumDescriptor {
	return file_normalized_log_proto_enumTypes[0].Descriptor()
}

func (DNS_ReturnCode) Type() protoreflect.EnumType {
	return &file_normalized_log_proto_enumTypes[0]
}

func (x DNS_ReturnCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ReturnCode.Descriptor instead.
func (DNS_ReturnCode) EnumDescriptor() ([]byte, []int) {
	return file_normalized_log_proto_rawDescGZIP(), []int{1, 0}
}

type Execution_Platform int32

const (
	Execution_UNSPECIFIED Execution_Platform = 0
	Execution_LINUX       Execution_Platform = 1
	Execution_WINDOWS     Execution_Platform = 2
	Execution_MAC         Execution_Platform = 3
)

// Enum value maps for Execution_Platform.
var (
	Execution_Platform_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LINUX",
		2: "WINDOWS",
		3: "MAC",
	}
	Execution_Platform_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LINUX":       1,
		"WINDOWS":     2,
		"MAC":         3,
	}
)

func (x Execution_Platform) Enum() *Execution_Platform {
	p := new(Execution_Platform)
	*p = x
	return p
}

func (x Execution_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Execution_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_normalized_log_proto_enumTypes[1].Descriptor()
}

func (Execution_Platform) Type() protoreflect.EnumType {
	return &file_normalized_log_proto_enumTypes[1]
}

func (x Execution_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Execution_Platform.Descriptor instead.
func (Execution_Platform) EnumDescriptor() ([]byte, []int) {
	return file_normalized_log_proto_rawDescGZIP(), []int{3, 0}
}

type NormalizedLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*NormalizedLog_DnsLog
	//	*NormalizedLog_NetflowLog
	//	*NormalizedLog_ExecutionLog
	Msg isNormalizedLog_Msg `protobuf_oneof:"msg"`
}

func (x *NormalizedLog) Reset() {
	*x = NormalizedLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_normalized_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizedLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedLog) ProtoMessage() {}

func (x *NormalizedLog) ProtoReflect() protoreflect.Message {
	mi := &file_normalized_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedLog.ProtoReflect.Descriptor instead.
func (*NormalizedLog) Descriptor() ([]byte, []int) {
	return file_normalized_log_proto_rawDescGZIP(), []int{0}
}

func (m *NormalizedLog) GetMsg() isNormalizedLog_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *NormalizedLog) GetDnsLog() *DNS {
	if x, ok := x.GetMsg().(*NormalizedLog_DnsLog); ok {
		return x.DnsLog
	}
	return nil
}

func (x *NormalizedLog) GetNetflowLog() *Netflow {
	if x, ok := x.GetMsg().(*NormalizedLog_NetflowLog); ok {
		return x.NetflowLog
	}
	return nil
}

func (x *NormalizedLog) GetExecutionLog() *Execution {
	if x, ok := x.GetMsg().(*NormalizedLog_ExecutionLog); ok {
		return x.ExecutionLog
	}
	return nil
}

type isNormalizedLog_Msg interface {
	isNormalizedLog_Msg()
}

type NormalizedLog_DnsLog struct {
	DnsLog *DNS `protobuf:"bytes,1,opt,name=dns_log,json=dnsLog,proto3,oneof"`
}

type NormalizedLog_NetflowLog struct {
	NetflowLog *Netflow `protobuf:"bytes,2,opt,name=netflow_log,json=netflowLog,proto3,oneof"`
}

type NormalizedLog_ExecutionLog struct {
	ExecutionLog *Execution `protobuf:"bytes,3,opt,name=execution_log,json=executionLog,proto3,oneof"`
}

func (*NormalizedLog_DnsLog) isNormalizedLog_Msg() {}

func (*NormalizedLog_NetflowLog) isNormalizedLog_Msg() {}

func (*NormalizedLog_ExecutionLog) isNormalizedLog_Msg() {}

// Normalized DNS log message.
type DNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the DNS query.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Domain query.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// DNS query type.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Query answer.
	Answer string `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	// DNS return code.
	ReturnCode DNS_ReturnCode `protobuf:"varint,5,opt,name=return_code,json=returnCode,proto3,enum=normalizedlog.DNS_ReturnCode" json:"return_code,omitempty"`
	// Source IP.
	SourceIp string `protobuf:"bytes,6,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	// DNS resolver IP.
	ResolverIp string `protobuf:"bytes,7,opt,name=resolver_ip,json=resolverIp,proto3" json:"resolver_ip,omitempty"`
	// Log source.
	LogSource string `protobuf:"bytes,8,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (x *DNS) Reset() {
	*x = DNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_normalized_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS) ProtoMessage() {}

func (x *DNS) ProtoReflect() protoreflect.Message {
	mi := &file_normalized_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS.ProtoReflect.Descriptor instead.
func (*DNS) Descriptor() ([]byte, []int) {
	return file_normalized_log_proto_rawDescGZIP(), []int{1}
}

func (x *DNS) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DNS) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DNS) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DNS) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *DNS) GetReturnCode() DNS_ReturnCode {
	if x != nil {
		return x.ReturnCode
	}
	return DNS_UNSPECIFIED
}

func (x *DNS) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *DNS) GetResolverIp() string {
	if x != nil {
		return x.ResolverIp
	}
	return ""
}

func (x *DNS) GetLogSource() string {
	if x != nil {
		return x.LogSource
	}
	return ""
}

// Normalized netflow log message.
type Netflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the network connection.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Source IP.
	SrcIp string `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	// Source port.
	SrcPort int32 `protobuf:"varint,3,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	// Destination IP.
	DstIp string `protobuf:"bytes,4,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	// Destination port.
	DstPort int32 `protobuf:"varint,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	// Number of inbound bytes.
	BytesIn int64 `protobuf:"varint,6,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	// Number of outbound bytes.
	BytesOut int64 `protobuf:"varint,7,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	// Number of inbound packets.
	PacketsIn int64 `protobuf:"varint,8,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	// Number of outbound packets.
	PacketsOut int64 `protobuf:"varint,9,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	// Transport-layer protocols (e.g. icmp, tcp, udp, icmpv6, etc).
	Protocol string `protobuf:"bytes,10,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Log source.
	LogSource string `protobuf:"bytes,11,opt,name=log_source,json=logSource,proto3" json:"log_source,omitempty"`
}

func (x *Netflow) Reset() {
	*x = Netflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_normalized_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netflow) ProtoMessage() {}

func (x *Netflow) ProtoReflect() protoreflect.Message {
	mi := &file_normalized_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netflow.ProtoReflect.Descriptor instead.
func (*Netflow) Descriptor() ([]byte, []int) {
	return file_normalized_log_proto_rawDescGZIP(), []int{2}
}

func (x *Netflow) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Netflow) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *Netflow) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Netflow) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *Netflow) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *Netflow) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *Netflow) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *Netflow) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *Netflow) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

func (x *Netflow) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Netflow) GetLogSource() string {
	if x != nil {
		return x.LogSource
	}
	return ""
}

// Normalized execution log message.
type Execution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the process execution.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Filepath of the binary.
	Filepath string `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"`
	// Full command that was executed.
	Command string `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// POSIX UID.
	Uid int64 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// Process ID.
	Pid int64 `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	// Parent process ID.
	Ppid int64 `protobuf:"varint,6,opt,name=ppid,proto3" json:"ppid,omitempty"`
	// Current working directory
	Cwd string `protobuf:"bytes,7,opt,name=cwd,proto3" json:"cwd,omitempty"`
	// Hostname.
	Hostname string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Host platform / operating system.
	Platform Execution_Platform `protobuf:"varint,9,opt,name=platform,proto3,enum=normalizedlog.Execution_Platform" json:"platform,omitempty"`
}

func (x *Execution) Reset() {
	*x = Execution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_normalized_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execution) ProtoMessage() {}

func (x *Execution) ProtoReflect() protoreflect.Message {
	mi := &file_normalized_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execution.ProtoReflect.Descriptor instead.
func (*Execution) Descriptor() ([]byte, []int) {
	return file_normalized_log_proto_rawDescGZIP(), []int{3}
}

func (x *Execution) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Execution) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *Execution) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Execution) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Execution) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Execution) GetPpid() int64 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

func (x *Execution) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Execution) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Execution) GetPlatform() Execution_Platform {
	if x != nil {
		return x.Platform
	}
	return Execution_UNSPECIFIED
}

var File_normalized_log_proto protoreflect.FileDescriptor

var file_normalized_log_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x6c, 0x6f, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x4e, 0x53, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x4e, 0x65, 0x74,
	0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x6c, 0x6f, 0x67, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc1, 0x03, 0x0a, 0x03, 0x44,
	0x4e, 0x53, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x4e, 0x53, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x4d,
	0x45, 0x52, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x52, 0x56, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x58, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x59, 0x58,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x52, 0x52, 0x53,
	0x45, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x41, 0x55, 0x54, 0x48, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x22, 0xda,
	0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x09,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x6c, 0x6f,
	0x67, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x3c,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x49, 0x4e, 0x55, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x42, 0x48, 0x5a, 0x46,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x68, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_normalized_log_proto_rawDescOnce sync.Once
	file_normalized_log_proto_rawDescData = file_normalized_log_proto_rawDesc
)

func file_normalized_log_proto_rawDescGZIP() []byte {
	file_normalized_log_proto_rawDescOnce.Do(func() {
		file_normalized_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_normalized_log_proto_rawDescData)
	})
	return file_normalized_log_proto_rawDescData
}

var file_normalized_log_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_normalized_log_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_normalized_log_proto_goTypes = []interface{}{
	(DNS_ReturnCode)(0),           // 0: normalizedlog.DNS.ReturnCode
	(Execution_Platform)(0),       // 1: normalizedlog.Execution.Platform
	(*NormalizedLog)(nil),         // 2: normalizedlog.NormalizedLog
	(*DNS)(nil),                   // 3: normalizedlog.DNS
	(*Netflow)(nil),               // 4: normalizedlog.Netflow
	(*Execution)(nil),             // 5: normalizedlog.Execution
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_normalized_log_proto_depIdxs = []int32{
	3, // 0: normalizedlog.NormalizedLog.dns_log:type_name -> normalizedlog.DNS
	4, // 1: normalizedlog.NormalizedLog.netflow_log:type_name -> normalizedlog.Netflow
	5, // 2: normalizedlog.NormalizedLog.execution_log:type_name -> normalizedlog.Execution
	6, // 3: normalizedlog.DNS.timestamp:type_name -> google.protobuf.Timestamp
	0, // 4: normalizedlog.DNS.return_code:type_name -> normalizedlog.DNS.ReturnCode
	6, // 5: normalizedlog.Netflow.timestamp:type_name -> google.protobuf.Timestamp
	6, // 6: normalizedlog.Execution.timestamp:type_name -> google.protobuf.Timestamp
	1, // 7: normalizedlog.Execution.platform:type_name -> normalizedlog.Execution.Platform
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_normalized_log_proto_init() }
func file_normalized_log_proto_init() {
	if File_normalized_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_normalized_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizedLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_normalized_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_normalized_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_normalized_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_normalized_log_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NormalizedLog_DnsLog)(nil),
		(*NormalizedLog_NetflowLog)(nil),
		(*NormalizedLog_ExecutionLog)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_normalized_log_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_normalized_log_proto_goTypes,
		DependencyIndexes: file_normalized_log_proto_depIdxs,
		EnumInfos:         file_normalized_log_proto_enumTypes,
		MessageInfos:      file_normalized_log_proto_msgTypes,
	}.Build()
	File_normalized_log_proto = out.File
	file_normalized_log_proto_rawDesc = nil
	file_normalized_log_proto_goTypes = nil
	file_normalized_log_proto_depIdxs = nil
}
